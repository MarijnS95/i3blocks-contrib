#!/usr/bin/env python3
#
# Copyright (C) 2016 James Murphy
# Licensed under the GPL version 2 only
#
# A battery indicator blocklet script for i3blocks

import re
from subprocess import check_output

status = check_output(['acpi'], universal_newlines=True)

if not status:
    # stands for no battery found
    fulltext = "<span color='red'><span font='FontAwesome'>\uf00d \uf240</span></span>"
    percentleft = 100
else:
    # if there is more than one battery in one laptop, the percentage left is 
    # available for each battery separately, although state and remaining 
    # time for overall block is shown in the status of the first battery 
    batteries = status.split("\n")
    state_batteries=[]
    commasplitstatus_batteries=[]
    percentleft_batteries=[]
    time = ""
    for battery in batteries:
        if battery!='':
            state_batteries.append(battery.split(": ")[1].split(", ")[0])
            commasplitstatus = battery.split(", ")
            if not time:
                time = commasplitstatus[-1].strip()
                # check if it matches a time
                # Force the first match to match 2 digits due to an odd issue where
                # printing the match shows the right result, but m.groups()[0] misses that first
                # character.
                time = re.match(r".*(\d{2}:\d+:\d+)", time)
                if time:
                    time = time.groups()[0]

            p = int(commasplitstatus[1].rstrip("%\n"))
            if p>0:
                percentleft_batteries.append(p)
            commasplitstatus_batteries.append(commasplitstatus)
    state = state_batteries[0]
    commasplitstatus = commasplitstatus_batteries[0]
    if percentleft_batteries:
        percentleft = int(sum(percentleft_batteries)/len(percentleft_batteries))
    else:
        percentleft = 0

    # stands for charging
    FA_LIGHTNING = "<span color='yellow'><span font='FontAwesome'>\uf0e7</span></span>"
    FA_LIGHTNING = "<span font='FontAwesome'>\uf0e7</span>"

    # stands for plugged in
    FA_PLUG = "<span font='FontAwesome'>\uf1e6</span>"

    def icon(percent):
        if percent < 10:
            return '\uf244'
        if percent < 25:
            return '\uf243'
        if percent < 50:
            return '\uf242'
        if percent < 75:
            return '\uf241'
        return '\uf240'

    # stands for unknown status of battery
    FA_QUESTION = "<span font='FontAwesome'>\uf128</span>"


    if state == "Discharging":
        # stands for using battery
        fulltext = "<span font='FontAwesome'>%s</span> " % (icon(percentleft),)
        timeleft = " ({})".format(time)
    elif state == "Full":
        fulltext = FA_PLUG + " "
        timeleft = ""
    elif state == "Unknown":
        fulltext = FA_QUESTION + " " + icon(0) + " "
        timeleft = ""
    else:
        # fulltext = FA_LIGHTNING + " " + FA_PLUG + " "
        fulltext = FA_PLUG + " "
        timeleft = " (" + FA_LIGHTNING + " {})".format(time)

    def color(percent):
        if percent < 10:
            # exit code 33 will turn background red
            return "#FFFFFF"
        if percent < 20:
            return "#FF3300"
        if percent < 25:
            return "#FF6600"
        if percent < 30:
            return "#FF9900"
        if percent < 35:
            return "#FFCC00"
        if percent < 40:
            return "#FFFF00"
        if percent < 45:
            return "#FFFF33"
        if percent < 50:
            return "#FFFF66"
        if percent > 95:
            return '#00FF00'
        return "#FFFFFF"

    form =  '<span color="{}">{}%</span>'
    fulltext += form.format(color(percentleft), percentleft)
    fulltext += timeleft

    with open('/sys/class/power_supply/BAT0/power_now', 'r') as f:
        uw = int(f.read())

    fulltext += ' %.2fW' % (uw * 10**-6,)

print(fulltext)
print(fulltext)
if percentleft < 10:
    exit(33)
